"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[523],{56643:e=>{e.exports=JSON.parse('{"functions":[{"name":"Service","desc":"Creates a new Service using currying syntax.\\n\\n```lua\\nService \\"GreetService\\" { Implements.OnPlayerAdded } {\\n\\t[Implements.OnPlayerAdded] = function(player: Player)\\n\\t\\tprint(`Hello, {player.Name}`)\\n\\tend\\n}\\n```","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"(implements: { string | Implements }) -> (props: { [string | Implements]: (...any) -> any | props }) -> ()"}],"function_type":"static","realm":["Server"],"source":{"line":47,"path":"src/silicon/Modules/Singleton/Service.lua"}},{"name":"AddService","desc":"Adds a service to the Service.Services table while running recognised implementation methods under the Service.","params":[{"name":"service","desc":"","lua_type":"Singleton"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","realm":["Server"],"source":{"line":77,"path":"src/silicon/Modules/Singleton/Service.lua"}},{"name":"AddServices","desc":"Iterates through an array of services and calls Service.AddService on each member of the array.","params":[{"name":"services","desc":"","lua_type":"{ Singleton }"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","realm":["Server"],"source":{"line":104,"path":"src/silicon/Modules/Singleton/Service.lua"}},{"name":"AddServiceContainer","desc":"Iterates through children of a given instance, accesses any module scripts found, and calls Service.AddService if the module script returns a Singleton.","params":[{"name":"serviceContainer","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","realm":["Server"],"source":{"line":120,"path":"src/silicon/Modules/Singleton/Service.lua"}}],"properties":[{"name":"Services","desc":"Contains all Services added by Service.AddService (or any of its variations).","lua_type":"{ [string]: Singleton }","realm":["Server"],"source":{"line":27,"path":"src/silicon/Modules/Singleton/Service.lua"}}],"types":[],"name":"Service","desc":"A class derived from singletons meant for use on the Server.","realm":["Server"],"source":{"line":18,"path":"src/silicon/Modules/Singleton/Service.lua"}}')}}]);