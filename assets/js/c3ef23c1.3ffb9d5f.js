"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[222],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=s(t),m=i,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(h,l(l({ref:n},d),{},{components:t})):r.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[p]="string"==typeof e?e:i,l[1]=a;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},74183:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const o={sidebar_position:2},l="A Comprehensive Guide To Silicon",a={unversionedId:"a-comprehensive-guide-to-silicon",id:"a-comprehensive-guide-to-silicon",title:"A Comprehensive Guide To Silicon",description:"A Comprehensive Guide is a long tutorial relative to other Silicon tutorials (such as Silicon By Example), however it goes more in depth about the design of Silicon.",source:"@site/docs/a-comprehensive-guide-to-silicon.md",sourceDirName:".",slug:"/a-comprehensive-guide-to-silicon",permalink:"/docs/a-comprehensive-guide-to-silicon",draft:!1,editUrl:"https://github.com/PolyVectors/Silicon/edit/main/docs/a-comprehensive-guide-to-silicon.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Intro",permalink:"/docs/intro"},next:{title:"Silicon By Example",permalink:"/docs/silicon-by-example"}},c={},s=[{value:"Singletons",id:"singletons",level:2},{value:"Services",id:"services",level:2},{value:"Controllers",id:"controllers",level:2},{value:"Bridges",id:"bridges",level:2}],d={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"a-comprehensive-guide-to-silicon"},"A Comprehensive Guide To Silicon"),(0,i.kt)("p",null,"A Comprehensive Guide is a long tutorial relative to other Silicon tutorials (such as Silicon By Example), however it goes more in depth about the design of Silicon."),(0,i.kt)("h2",{id:"singletons"},"Singletons"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Singleton")," is an idea taken from Knit.\nSingletons are used in Silicon as a template for creating ",(0,i.kt)("inlineCode",{parentName:"p"},"Services")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Controllers")," (ideas inspired from Flamework and Knit)."),(0,i.kt)("h2",{id:"services"},"Services"),(0,i.kt)("p",null,"A Service is a class derived from a Singleton that is exclusive to the server.\nCreating a Service in Silicon requires minimal syntax and Services can be used powerfully to define behaviour on the server.\nHere is an example of a simple service that will be brought up repeatedly and expanded on in the tutorial:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Silicon = require(Path.To.Silicon) -- Replace Path.To.Silicon with the actual Silicon path (preferably absolute).\n\nlocal Service = Silicon.Service.Service -- The first occurrence of "Service" is a table that holds public methods in the Service class, the second occurrence of "Service" is the method that creates a new Service.\nlocal AddService = Silicon.Service.AddService -- "AddService" is a method that tells Silicon to add a service and execute its Implementations.\n\nlocal Implements = Silicon.Implements -- The "Implements" class tells Silicon to hook to certain methods in a Singleton to run them under certain conditions, essentially "implementing" certain methods.\n\n-- Here, the Implement "OnPlayerAdded" is used which calls the "OnPlayerAdded" method of the Service when a new player joins the experience.\nlocal GreetService = Service "GreetService" { Implements.OnPlayerAdded } {\n    [Implements.OnPlayerAdded] = function(player: Player)\n        print(`Hello, {player.Name}!`)\n    end,\n}\n\n-- Here is where implementations will be evaluated and executed by Silicon.\nAddService(GreetService)\n\n-- Start Silicon and consequently run the (unused) OnStart implementation.\nSilicon.Start()\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'This is an example of a "standalone" Service which does not require the use of any other Services or ',(0,i.kt)("inlineCode",{parentName:"p"},"Bridges"),".\nStandalone Services still need to be added using any variation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"AddService")," method.")),(0,i.kt)("p",null,"Services however, do not to be this complex and a simple Service can be created with a minimal amount of syntax."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- //snip//\nService "MyService" {} {}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This is a Service that essentially does nothing, however it does showcase the minimal syntax of Silicon.")),(0,i.kt)("h2",{id:"controllers"},"Controllers"),(0,i.kt)("p",null,"Controllers run parallel to Services in the way that they mimic each others methods.\nThe difference between controllers and Services however, is that Controllers run on the client.\nControllers are also derived from Singletons.\nHere is an example of a simple controller that will also be brought up repeatedly and expanded upon in the tutorial:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Players = game:GetService("Players")\nlocal Silicon = require(Path.To.Silicon) -- Replace Path.To.Silicon with the actual Silicon path (preferably absolute).\n\nlocal Controller = Silicon.Controller.Controller -- Similar to Services, Controllers are contained in the Controller table under Silicon.\nlocal AddController = Silicon.Controller.AddController -- A method in the Controller table equivalent to AddService on the server.\n\nlocal Implements = Silicon.Implements\n\n-- Here, the Implement "OnStart" is used which calls the "OnStart" method of the Controller when Silicon starts on the client.\nlocal GreetController = Controller("GreetController")({ Implements.OnStart })({\n    [Implements.OnStart] = function()\n        print(`Hello, {Players.LocalPlayer.Name}!`)\n    end,\n})\n\nAddController(GreetController)\n\nSilicon.Start()\n')),(0,i.kt)("h2",{id:"bridges"},"Bridges"),(0,i.kt)("p",null,"Bridges are a concept unique to Silicon which essentially handle networking between Services and Controllers.\nHere is example of basic usage of bridges to handle client to server communication:"))}u.isMDXComponent=!0}}]);