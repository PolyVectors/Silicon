[{"title":"Bridge","type":0,"sectionRef":"#","url":"/api/Bridge","content":"On this page Bridge A class that handles networking under a unique &quot;bridge&quot; model.","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"/docs/intro","content":"Intro Silicon is a modern game framework that focuses on being fast and easy. Silicon is inspired by Fusion, Flamework and Knit. This tutorial will help you to understand how to use Silicon as quickly as possible, while learning important design choices and rules along the way.","keywords":""},{"title":"A Comprehensive Guide To Silicon","type":0,"sectionRef":"#","url":"/docs/a-comprehensive-guide-to-silicon","content":"","keywords":""},{"title":"Singletons​","type":1,"pageTitle":"A Comprehensive Guide To Silicon","url":"/docs/a-comprehensive-guide-to-silicon#singletons","content":"A Singleton is an idea taken from Knit. Singletons are used in Silicon as a template for creating Services and Controllers (ideas inspired from Flamework and Knit). "},{"title":"Services​","type":1,"pageTitle":"A Comprehensive Guide To Silicon","url":"/docs/a-comprehensive-guide-to-silicon#services","content":"A Service is a class derived from a Singleton that is exclusive to the server. Creating a Service in Silicon requires minimal syntax and Services can be used powerfully to define behaviour on the server. Here is an example of a simple service that will be brought up repeatedly and expanded on in the tutorial: local Silicon = require(Path.To.Silicon) -- Replace Path.To.Silicon with the actual Silicon path (preferably absolute). local Service = Silicon.Service.Service -- The first occurance of &quot;Service&quot; is a table that holds public methods in the Service class, the second occurance of &quot;Service&quot; is the method that creates a new Service. local AddService = Silicon.Service.AddService -- &quot;AddService&quot; is a method that tells Silicon to add a service and execute its Implementations. local Implements = Silicon.Implements -- The &quot;Implements&quot; class tells Silicon to hook to certain methods in a Singleton to run them under certain conditions, essentialy &quot;implementing&quot; certain methods. -- Here, the Implement &quot;OnPlayerAdded&quot; is used which calls the &quot;OnPlayerAdded&quot; method of the Service when a new player joins the experience. local GreetService = Service &quot;GreetService&quot; { Implements.OnPlayerAdded } { [Implements.OnPlayerAdded] = function(player: Player) print(`Hello, {player.Name}!`) end, } -- Here is where implementations will be evaluated and executed by Silicon. AddService(GreetService) -- Start Silicon and consequently run the (unused) OnStart implementation. Silicon.Start()  This is an example of a &quot;standalone&quot; service which does not require the use of any other services or Bridges. Standalone services still need to be added using any variation of the AddService method. Services, however do not to be this complex and a simple service can be created with a minimal amount of syntax. -- //snip// Service &quot;MyService&quot; {} {}  This is a service that essentially does nothing, however it does showcase the minimal syntax of Silicon. "},{"title":"Controllers​","type":1,"pageTitle":"A Comprehensive Guide To Silicon","url":"/docs/a-comprehensive-guide-to-silicon#controllers","content":""},{"title":"Implements","type":0,"sectionRef":"#","url":"/api/Implements","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Implements","url":"/api/Implements#types","content":" "},{"title":"Implements​","type":1,"pageTitle":"Implements","url":"/api/Implements#Implements","content":"&lt;/&gt; type Implements = &quot;OnStart&quot; | &quot;OnPlayerAdded&quot; | &quot;OnCharacterAdded&quot; | &quot;None&quot; This type dictates all of the default implementations that can be implemented into a Service/Controller. "},{"title":"Properties​","type":1,"pageTitle":"Implements","url":"/api/Implements#properties","content":" "},{"title":"OnStart​","type":1,"pageTitle":"Implements","url":"/api/Implements#OnStart","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Implements.OnStart: Implements An implementation that fires when Silicon starts.  "},{"title":"OnPlayerAdded​","type":1,"pageTitle":"Implements","url":"/api/Implements#OnPlayerAdded","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Implements.OnPlayerAdded: Implements An implementation that passes in players as arguments each time the Players.PlayerAdded signal is fired.  "},{"title":"OnCharacterAdded​","type":1,"pageTitle":"Implements","url":"/api/Implements#OnCharacterAdded","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Implements.OnCharacterAdded: Implements An implementation that passes in players as arguments each time the Players.PlayerAdded signal is fired.  "},{"title":"None​","type":1,"pageTitle":"Implements","url":"/api/Implements#None","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Implements.None: Implements Does nothing. "},{"title":"Silicon","type":0,"sectionRef":"#","url":"/api/Silicon","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Silicon","url":"/api/Silicon#functions","content":" "},{"title":"Service​","type":1,"pageTitle":"Silicon","url":"/api/Silicon#Service","content":"This item only works when running on the server. Server &lt;/&gt; Silicon.Service(name: string) → (implements: {string | Implements}) → (props: {[string | Implements]: (...any) → any} | props) → Singleton Creates a new Service using currying syntax. Service &quot;GreetService&quot; { Implements.OnPlayerAdded } { [Implements.OnPlayerAdded] = function(player: Player) print(`Hello, {player.Name}`) end }   "},{"title":"Controller​","type":1,"pageTitle":"Silicon","url":"/api/Silicon#Controller","content":"This item only works when running on the client. Client &lt;/&gt; Silicon.Controller(name: string) → (implements: {string | Implements}) → (props: {[string | Implements]: (...any) → any | props}) → Singleton Creates a new controller using currying syntax. Controller &quot;GreetController&quot; { Implements.OnStart } { [Implements.OnStart] = function(player: Player) print(`Hello, {player.Name}`) end }  "},{"title":"EventType","type":0,"sectionRef":"#","url":"/api/EventType","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"EventType","url":"/api/EventType#types","content":" "},{"title":"EventType​","type":1,"pageTitle":"EventType","url":"/api/EventType#EventType","content":"&lt;/&gt; type EventType = &quot;OnStart&quot; | &quot;OnPlayerAdded&quot; | &quot;OnCharacterAdded&quot; | &quot;None&quot; This type dictates all of the default events that can be implemented into a Bridge. "},{"title":"Properties​","type":1,"pageTitle":"EventType","url":"/api/EventType#properties","content":" "},{"title":"ServerToClient​","type":1,"pageTitle":"EventType","url":"/api/EventType#ServerToClient","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; EventType.ServerToClient: EventType A bridge type that handles one way messages from the server to the client.  "},{"title":"ClientToServer​","type":1,"pageTitle":"EventType","url":"/api/EventType#ClientToServer","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; EventType.ClientToServer: EventType A bridge type that handles one way messages from the client to the server. "},{"title":"Controller","type":0,"sectionRef":"#","url":"/api/Controller","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Controller","url":"/api/Controller#properties","content":" "},{"title":"Controllers​","type":1,"pageTitle":"Controller","url":"/api/Controller#Controllers","content":"This item only works when running on the client. Client &lt;/&gt; Controller.Controllers: {[string]: Singleton} Contains all Controllers added by Controller.AddController (or any of its variations). "},{"title":"Functions​","type":1,"pageTitle":"Controller","url":"/api/Controller#functions","content":" "},{"title":"Controller​","type":1,"pageTitle":"Controller","url":"/api/Controller#Controller","content":"This item only works when running on the client. Client &lt;/&gt; Controller.Controller(name: string) → (implements: {string | Implements}) → (props: {[string | Implements]: (...any) → any | props}) → Singleton Creates a new controller using currying syntax. Controller &quot;GreetController&quot; { Implements.OnStart } { [Implements.OnStart] = function(player: Player) print(`Hello, {player.Name}`) end }   "},{"title":"AddController​","type":1,"pageTitle":"Controller","url":"/api/Controller#AddController","content":"This item only works when running on the client. Client &lt;/&gt; Controller.AddController(controller: Singleton) → nil Adds a controller to the Controller.Controllers table while running recognised implementation methods under the Controller.  "},{"title":"AddControllerContainer​","type":1,"pageTitle":"Controller","url":"/api/Controller#AddControllerContainer","content":"This item only works when running on the client. Client &lt;/&gt; Controller.AddControllerContainer(controllerContainer: Instance ) → nil Iterates through children of a given instance, accesses any module scripts found, and calls Controller.AddController if the module script returns a Singleton. "},{"title":"Service","type":0,"sectionRef":"#","url":"/api/Service","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Service","url":"/api/Service#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"Service","url":"/api/Service#Services","content":"This item only works when running on the server. Server &lt;/&gt; Service.Services: {[string]: Singleton} Contains all Services added by Service.AddService (or any of its variations). "},{"title":"Functions​","type":1,"pageTitle":"Service","url":"/api/Service#functions","content":" "},{"title":"Service​","type":1,"pageTitle":"Service","url":"/api/Service#Service","content":"This item only works when running on the server. Server &lt;/&gt; Service.Service(name: string) → (implements: {string | Implements}) → (props: {[string | Implements]: (...any) → any | props}) → () Creates a new Service using currying syntax. Service &quot;GreetService&quot; { Implements.OnPlayerAdded } { [Implements.OnPlayerAdded] = function(player: Player) print(`Hello, {player.Name}`) end }   "},{"title":"AddService​","type":1,"pageTitle":"Service","url":"/api/Service#AddService","content":"This item only works when running on the server. Server &lt;/&gt; Service.AddService(service: Singleton) → nil Adds a service to the Service.Services table while running recognised implementation methods under the Service.  "},{"title":"AddServices​","type":1,"pageTitle":"Service","url":"/api/Service#AddServices","content":"This item only works when running on the server. Server &lt;/&gt; Service.AddServices(services: {Singleton}) → nil Iterates through an array of services and calls Service.AddService on each member of the array.  "},{"title":"AddServiceContainer​","type":1,"pageTitle":"Service","url":"/api/Service#AddServiceContainer","content":"This item only works when running on the server. Server &lt;/&gt; Service.AddServiceContainer(serviceContainer: Instance ) → nil Iterates through children of a given instance, accesses any module scripts found, and calls Service.AddService if the module script returns a Singleton. "},{"title":"Silicon By Example","type":0,"sectionRef":"#","url":"/docs/silicon-by-example","content":"Silicon By Example This page takes heavy inspiration from Rust by example. Silicon by example is a fast paced tutorial on how to use Silicon as quickly as possible.","keywords":""},{"title":"Silicon Versus Other Frameworks","type":0,"sectionRef":"#","url":"/docs/silicon-vs-other-frameworks","content":"","keywords":""},{"title":"Money Service (from Knit)​","type":1,"pageTitle":"Silicon Versus Other Frameworks","url":"/docs/silicon-vs-other-frameworks#money-service-from-knit","content":"local Knit = require(game:GetService(&quot;ReplicatedStorage&quot;).Packages.Knit) -- Create the service: local MoneyService = Knit.CreateService { Name = &quot;MoneyService&quot;, } -- Add some methods to the service: function MoneyService:GetMoney(player) -- Do some sort of data fetch local money = someDataStore:GetAsync(&quot;money&quot;) return money end function MoneyService:GiveMoney(player, amount) -- Do some sort of data fetch local money = self:GetMoney(player) money += amount someDataStore:SetAsync(&quot;money&quot;, money) end Knit.Start():catch(warn)  Knit (from README.md) This example shows the clever usage of Promises in Knit which means that any errors caused by Knit services are caught safely by the warn function. Silicon takes this idea, an example of inspiration taken from Knit. local Silicon = require(game:GetService(&quot;ReplicatedStorage&quot;).Packages.Silicon) local Service = Silicon.Service.Service local Implements = Silicon.Implements --- Create the service: Service &quot;MoneyService&quot; { Implements.None } { -- Add some methods to the service: GetMoney = function(player: Player) -- Do some sort of data fetch local money = someDataStore:GetAsync(&quot;money&quot;) return money end GiveMoney = function() -- Do some sort of data fetch local money = self:GetMoney(player: Player, amount: string) money += amount someDataStore:SetAsync(&quot;money&quot;, money) end } Silicon.Start():catch(warn)  Silicon 0.1.0.alpha.3 "},{"title":"Boilerplate Showcase (from Flamework)​","type":1,"pageTitle":"Silicon Versus Other Frameworks","url":"/docs/silicon-vs-other-frameworks#boilerplate-showcase-from-flamework","content":"@Service() export class MyService {}  Flamework (from Flamework docs) The lack of boilerplate in Flamework is a huge inspiration for Silicon. Silicon also takes more inspiration from Flamework due to its awesome type safe networking model. Service &quot;MyService&quot; {} {}  or an alternative: Service &quot;MyService&quot; { Implements.None } {}  Silicon 0.1.0.alpha.3 "}]